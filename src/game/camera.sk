class Camera {
  var playerA Player
  var playerB Player
  var width double
  var height double

  def draw(c Context, renderer Game) {
    var positionA = playerA.getCenter
    var positionB = playerB.getCenter
    var center = (positionA + positionB) / 2

    # maximum distance between a player and the center is the distance to the box that is half the size of the screen
    var temp = (positionB - positionA).unit
    temp = Vector.new(width / Math.abs(temp.x), height / Math.abs(temp.y))
    var maxLength = Math.min(temp.x, temp.y) / 4

    var isSplit = (positionB - positionA).lengthSquared > 4 * maxLength * maxLength
    if !isSplit {
      renderer.render(c, center, width, height)
      return
    }

    var aToB = (positionB - positionA).unit * 99
    var split = aToB.flip

    # make sure a's center isn't more than maxLength from positionA
    var centerA = center - positionA
    if centerA.lengthSquared > maxLength * maxLength {
      centerA = centerA.unit * maxLength
    }
    centerA = centerA + positionA

    # make sure b's center isn't more than maxLength from positionB
    var centerB = center - positionB
    if centerB.lengthSquared > maxLength * maxLength {
      centerB = centerB.unit * maxLength
    }
    centerB = centerB + positionB

    # draw world from a's point of view
    c.save
    clipHelper(c, width / 2, height / 2, split)
    renderer.render(c, centerA, width, height)
    c.restore

    # draw world from b's point of view
    c.save
    clipHelper(c, width / 2, height / 2, -split)
    renderer.render(c, centerB, width, height)
    c.restore

    # divide both player's view with a black line
    var splitSize = Math.min(0.1, ((positionB - positionA).length - 1.9 * maxLength) * 0.01)
    c.save
    c.setStrokeThickness(2 * splitSize)
    c.setStrokeColor(.BLACK)
    c.beginPath
    c.moveTo(-split.x, -split.y)
    c.lineTo(split.x, split.y)
    c.stroke
    c.restore
  }
}

# Clip a rectangular w by h polygon by a line passing though split and the origin:
#
#  +-----+---+
#  | A  /  B |
#  +---+-----+
#
# Pass split to get region A and -split to get region B.  This is necessary likely
# because Firefox 4.0b8 renders to an internal buffer bounding the clipping polygon,
# but the polygon isn't clipped to the canvas before being bounded.  Before this,
# we were just drawing a huge polygon 99999 units across and not bothering to tightly
# wrap the canvas, but Firefox was crashing.
def clipHelper(c Context, w double, h double, split Vector) {
  var tx = h / split.y
  var ty = w / split.x
  c.beginPath
  if (-w) * split.y - (-h) * split.x >= 0 {
    c.lineTo(-w, -h)
  }
  if Math.abs(split.y * ty) <= h {
    c.lineTo(-split.x * ty, -split.y * ty)
  }
  if (-w) * split.y - (+h) * split.x >= 0 {
    c.lineTo(-w, +h)
  }
  if Math.abs(split.x * tx) <= w {
    c.lineTo(split.x * tx, split.y * tx)
  }
  if (+w) * split.y - (+h) * split.x >= 0 {
    c.lineTo(+w, +h)
  }
  if Math.abs(split.y * ty) <= h {
    c.lineTo(split.x * ty, split.y * ty)
  }
  if (+w) * split.y - (-h) * split.x >= 0 {
    c.lineTo(+w, -h)
  }
  if Math.abs(split.x * tx) <= w {
    c.lineTo(-split.x * tx, -split.y * tx)
  }
  c.closePath
  c.clip
}
