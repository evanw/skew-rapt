class Stalacbat : FreefallEnemy {
  var isFalling = false
  var sprites = [Sprite.new, Sprite.new, Sprite.new]
  var target Player

  def new(center Vector, target Player) {
    super(.STALACBAT, center, RADIUS, 0)
    self.target = target

    # Draw circle for body
    sprites[SPRITE_BODY].drawCallback = DrawStalacbatBody.INSTANCE

    # Draw the two wings
    sprites[SPRITE_LEFT_WING].drawCallback = DrawStalacbatWing.INSTANCE
    sprites[SPRITE_RIGHT_WING].drawCallback = DrawStalacbatWing.INSTANCE

    sprites[SPRITE_LEFT_WING].setParent(sprites[SPRITE_BODY])
    sprites[SPRITE_RIGHT_WING].setParent(sprites[SPRITE_BODY])
  }

  # Falls when the target is directly beneath it
  over move(seconds double) Vector {
    if isFalling {
      return super(seconds)
    }

    if target != null && !target.isDead {
      var playerPos = target.getCenter
      var pos = getCenter
      if Math.abs(playerPos.x - pos.x) < 0.1 && playerPos.y < pos.y && CollisionDetector.lineOfSightWorld(pos, playerPos) == null {
        isFalling = true
        return super(seconds)
      }
    }

    return Vector.new(0, 0)
  }

  over afterTick(seconds double) {
    var percent = velocity.y * -0.25
    if percent > 1 {
      percent = 1
    }

    var position = getCenter
    sprites[SPRITE_BODY].offsetBeforeRotation = Vector.new(position.x, position.y + 0.1 - 0.2 * percent)

    var angle = percent * Math.PI / 2
    sprites[SPRITE_LEFT_WING].angle = Math.PI - angle
    sprites[SPRITE_RIGHT_WING].angle = angle - Math.PI / 2
  }

  over onDeath {
    gameState.incrementStat(.ENEMY_DEATHS)

    var isRed = target == gameState.playerA ? 0.8 : 0
    var isBlue = target == gameState.playerB ? 1 : 0

    var position = getCenter
    for i in 0..15 {
      var direction = Vector.fromAngle(randInRange(0, 2 * Math.PI)) * randInRange(5, 10)
      Particle.triangle
        .position(position)
        .velocity(direction)
        .radius(0.2)
        .bounces(3)
        .decay(0.01)
        .elasticity(0.5)
        .color(isRed, 0, isBlue, 1)
    }
  }

  over draw(c Context) {
    # Draw the colored "eye"
    c.setFillColor(target == gameState.playerA ? .RED : .BLUE)

    # Draw the black wings
    sprites[SPRITE_BODY].draw(c)
  }
}

namespace Stalacbat {
  const RADIUS = 0.2
  const SPEED = 2.0
  const SPRITE_BODY = 0
  const SPRITE_LEFT_WING = 1
  const SPRITE_RIGHT_WING = 2
}

class DrawStalacbatBody :: DrawCallback {
  def draw(c Context) {
    c.setStrokeColor(.BLACK)
    c.beginPath
    c.arc(0, 0, 0.1, 0, TWOPI, false)
    c.stroke
    c.fill
  }
}

namespace DrawStalacbatBody {
  const INSTANCE = new
}

class DrawStalacbatWing :: DrawCallback {
  def draw(c Context) {
    c.setStrokeColor(.BLACK)
    c.beginPath
    c.arc(0, 0, 0.2, 0, Math.PI / 2, false)
    c.arc(0, 0, 0.15, Math.PI / 2, 0, true)
    c.stroke

    c.beginPath
    c.moveTo(0.07, 0.07)
    c.lineTo(0.1, 0.1)
    c.stroke
  }
}

namespace DrawStalacbatWing {
  const INSTANCE = new
}
