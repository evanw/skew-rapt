class Rocket : RotatingEnemy {
  var target Player
  var sprites = [Sprite.new, Sprite.new]
  var maxRotation = MAX_ROTATION
  var timeUntilFree = HEADING_CONSTRAINT_TIME
  var timeUntilNextParticle = 0.0

  def new(center Vector, target Player, heading double) {
    super(.ROCKET, center, RADIUS, heading, ELASTICITY)
    self.target = target
    velocity = Vector.fromAngle(heading) * SPEED
    sprites[SPRITE_RED].drawCallback = DrawRocket.new(.RED)
    sprites[SPRITE_BLUE].drawCallback = DrawRocket.new(.BLUE)
  }

  def calcHeading(seconds double) {
    if target.isDead { return }
    var delta = target.getCenter - getCenter
    var angle = delta.atan2
    heading = adjustAngleToTarget(heading, angle, maxRotation * seconds)
  }

  over move(seconds double) Vector {
    if timeUntilFree <= 0 {
      calcHeading(seconds)
      velocity = Vector.fromAngle(heading) * SPEED
    } else {
      timeUntilFree -= seconds
    }
    return velocity * seconds
  }

  over afterTick(seconds double) {
    var position = getCenter
    sprites[SPRITE_RED].offsetBeforeRotation = position
    sprites[SPRITE_BLUE].offsetBeforeRotation = position
    sprites[SPRITE_RED].angle = heading
    sprites[SPRITE_BLUE].angle = heading

    position = position - velocity.unit * RADIUS

    timeUntilNextParticle -= seconds
    while timeUntilNextParticle <= 0 && !isDead { # must test IsDead otherwise particles go through walls
      # add a flame
      var direction = Vector.fromAngle(randInRange(0, TWOPI)) * randInRange(0, 2) - velocity * 3
      Particle.triangle
        .position(position)
        .velocity(direction)
        .randomRadius(0.1, 0.15)
        .bounces(1)
        .randomDecay(0.000001, 0.00001)
        .randomExpand(1.0, 1.2)
        .color(1, 0.5, 0, 1)
        .mixColor(1, 1, 0, 1)

      # add a puff of smoke
      direction = Vector.fromAngle(randInRange(0, TWOPI)) * randInRange(0.25, 1) - velocity
      Particle.circle
        .position(position)
        .velocity(direction)
        .randomRadius(0.05, 0.1)
        .bounces(1)
        .randomElasticity(0.05, 0.9)
        .randomDecay(0.0005, 0.001)
        .randomExpand(1.2, 1.4)
        .color(0, 0, 0, 0.25)
        .mixColor(0.25, 0.25, 0.25, 0.75)
        .randomGravity(-0.4, 0)

      timeUntilNextParticle += PARTICLE_FREQUENCY
    }
  }

  over reactToWorld(contact Contact) {
    setDead(true)
  }

  over reactToPlayer(player Player) {
    setDead(true)
    player.setDead(true)
  }

  over onDeath {
    var position = getCenter

    # fire
    for i in 0..50 {
      var direction = Vector.fromAngle(randInRange(0, TWOPI)) * randInRange(0.5, 17)
      Particle.triangle
        .position(position)
        .velocity(direction)
        .randomRadius(0.02, 0.15)
        .randomBounces(0, 4)
        .randomElasticity(0.05, 0.9)
        .randomDecay(0.00001, 0.0001)
        .randomExpand(1.0, 1.2)
        .color(1, 0.5, 0, 1)
        .mixColor(1, 1, 0, 1)
    }
  }

  over draw(c Context) {
    sprites[target == gameState.playerA ? SPRITE_RED : SPRITE_BLUE].draw(c)
  }
}

namespace Rocket {
  const SPRITE_RED = 0
  const SPRITE_BLUE = 1
  const SPEED = 2.5
  const MAX_ROTATION = 8.0 # Max rotation in radians / second
  const RADIUS = 0.15
  const ELASTICITY = 1.0
  const HEADING_CONSTRAINT_TIME = 0.3 # In seconds, the amount of time the Rocket's direction is fixed
  const PARTICLE_FREQUENCY = 0.03
}

class DrawRocket :: DrawCallback {
  var color Color

  def draw(c Context) {
    const size = 0.075
    c.setFillColor(color)
    c.setStrokeColor(.BLACK)
    c.beginPath
    c.moveTo(-Rocket.RADIUS, size)
    c.lineTo(Rocket.RADIUS - size, size)
    c.lineTo(Rocket.RADIUS, 0)
    c.lineTo(Rocket.RADIUS - size, -size)
    c.lineTo(-Rocket.RADIUS, -size)
    c.closePath
    c.fill
    c.stroke
  }
}
