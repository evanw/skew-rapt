class ShockHawk : HoveringEnemy {
  var target Player
  var chasing = false
  var bodySprite = Sprite.new

  def new(center Vector, target Player) {
    super(.SHOCK_HAWK, center, RADIUS, 0)
    self.target = target
    bodySprite.drawCallback = DrawShockHawk.INSTANCE
  }

  over avoidsSpawn bool {
    return !chasing
  }

  over move(seconds double) Vector {
    # Time independent version of multiplying by 0.998
    # solved x^0.01 = 0.998 for x very precisely using wolfram alpha
    velocity *= Math.pow(0.8185668046884278157989334904543296243702023236680159019579, seconds)

    if target == null || target.isDead {
      chasing = false
      return accelerate(velocity * -DECEL, seconds)
    }

    var relTargetPos = target.getCenter - getCenter
    if relTargetPos.lengthSquared > RANGE * RANGE {
      chasing = false
      return accelerate(velocity * -DECEL, seconds)
    }

    chasing = true
    relTargetPos.normalize
    return accelerate(relTargetPos * ACCEL, seconds)
  }

  over onDeath {
    gameState.incrementStat(.ENEMY_DEATHS)
  }

  over afterTick(seconds double) {
    var position = getCenter
    bodySprite.offsetBeforeRotation = position

    if !target.isDead {
      bodySprite.angle = (target.getCenter - position).atan2 - Math.PI / 2
    }
  }

  over draw(c Context) {
    c.setFillColor(target == gameState.playerA ? .RED : .BLUE)
    c.setStrokeColor(.BLACK)
    bodySprite.draw(c)
  }
}

namespace ShockHawk {
  const RADIUS = 0.3
  const ACCEL = 6
  const DECEL = 0.8
  const RANGE = 10.0
}

class DrawShockHawk :: DrawCallback {
  def draw(c Context) {
    # draw solid center
    c.beginPath
    c.moveTo(0, -0.15)
    c.lineTo(0.05, -0.1)
    c.lineTo(0, 0.1)
    c.lineTo(-0.05, -0.1)
    c.fill

    # draw outlines
    c.beginPath
    for scale in [-1, 1] {
      c.moveTo(0, -0.3)
      c.lineTo(scale * 0.05, -0.2)
      c.lineTo(scale * 0.1, -0.225)
      c.lineTo(scale * 0.1, -0.275)
      c.lineTo(scale * 0.15, -0.175)
      c.lineTo(0, 0.3)

      c.moveTo(0, -0.15)
      c.lineTo(scale * 0.05, -0.1)
      c.lineTo(0, 0.1)
    }
    c.stroke
  }
}

namespace DrawShockHawk {
  const INSTANCE = new
}
